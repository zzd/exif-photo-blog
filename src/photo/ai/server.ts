import { generateOpenAiImageQuery } from '@/services/openai';
import {
  AI_IMAGE_QUERIES,
  AiAutoGeneratedField,
  cleanUpAiTextResponse,
  parseTitleAndCaption,
} from '.';

export const generateAiImageQueries = async (
  imageBase64?: string,
  textFieldsToGenerate: AiAutoGeneratedField[] = [],
): Promise<{
  title?: string
  caption?: string
  tags?: string
  semanticDescription?: string
}> => {
  let title: string | undefined;
  let caption: string | undefined;
  let tags: string | undefined;
  let semanticDescription: string | undefined;

  if (imageBase64) {
    if (
      textFieldsToGenerate.includes('title') &&
      textFieldsToGenerate.includes('caption')
    ) {
      const titleAndCaption = await generateOpenAiImageQuery(
        imageBase64,
        AI_IMAGE_QUERIES['title-and-caption'],
      );
      if (titleAndCaption) {
        const titleAndCaptionParsed = parseTitleAndCaption(titleAndCaption);
        title = titleAndCaptionParsed.title;
        caption = titleAndCaptionParsed.caption;
      }
    } else {
      if (textFieldsToGenerate.includes('title')) {
        title = cleanUpAiTextResponse(
          await generateOpenAiImageQuery(
            imageBase64,
            AI_IMAGE_QUERIES['title'],
          ));
      }
      if (textFieldsToGenerate.includes('caption')) {
        caption = cleanUpAiTextResponse(
          await generateOpenAiImageQuery(
            imageBase64,
            AI_IMAGE_QUERIES['caption'],
          ));
      }
    }

    if (textFieldsToGenerate.includes('tags')) {
      tags = cleanUpAiTextResponse(
        await generateOpenAiImageQuery(
          imageBase64,
          AI_IMAGE_QUERIES['tags'],
        ));
    }

    if (textFieldsToGenerate.includes('semantic')) {
      semanticDescription = cleanUpAiTextResponse(
        await generateOpenAiImageQuery(
          imageBase64,
          AI_IMAGE_QUERIES['description-small'],
        ));
    }
  }

  return {
    title,
    caption,
    tags,
    semanticDescription,
  };
};
